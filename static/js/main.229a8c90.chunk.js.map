{"version":3,"sources":["GlobalStyles.js","Raytracer/Color.js","Raytracer/Ray.js","Raytracer/Vector.js","Raytracer/Camera.js","Raytracer/Light.js","Raytracer/Intersection.js","Raytracer/Plane.js","Raytracer/Sphere.js","Raytracer/Material.js","Raytracer/Scene.js","Raytracer/index.js","views/MainScene.js","App.js","index.js"],"names":["createGlobalStyle","Canvas","styled","C","RayTracedCanvas","div","Color","r","g","b","this","factor","color","lower","upper","Math","max","min","legalize","d","floor","black","Ray","start","dir","add","scalarMultiply","Vector","x","y","z","vector","sqrt","dotProduct","subtract","length","magnitude","Camera","position","lookAt","fov","aspectRatio","angle","tan","PI","forward","normalize","right","crossProduct","up","Light","attenuation","point","distance","scalarDivide","Intersection","isHit","normal","ray","material","Number","MAX_SAFE_INTEGER","Plane","name","denom","dist","at","Sphere","size","closestDistance","distance1","distance2","rayToCenter","a","c","discriminant","q","temp","Material","diffuse","specular","isSpecular","reflection","isTransparent","refraction","Scene","camera","lights","objects","pos","white","undefined","RayTracer","height","width","context","scene","inside","one","two","three","intersectScene","direction","n1","n2","c1","clamp","eta1","eta2","sine","cosine","rs","abs","rp","refractedNormal","eta","c2","depth","reflectionCoeff","reflectedVector","reflectedRay","trace","fresnel","calculateFresnelValue","outside","bias","background","refractedVector","getRefractedRay","refractedRayDirection","refractedRay","reflectedRayDirection","i","directionToLight","shadowRay","shadowRayIntersection","spawnShadowRay","genColor","intensityAt","multiply","calculateReflectedLight","calculateRefractedLight","closest","Infinity","closestIntersection","intersection","intersect","illuminate","getPoint","xx","yy","toDrawingColor","fillStyle","fillRect","MainScene","canvasRef","useThree","gl","lightRef","useRef","set","setSize","window","innerWidth","innerHeight","useEffect","current","children","forEach","obj","worldToLocal","ele","canvas","document","createElement","style","appendChild","getContext","render","attach","intensity","ref","args","rotation","receiveShadow","castShadow","App","React","display","ReactDOM","GlobalStyles","getElementById"],"mappings":"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","file":"static/js/main.229a8c90.chunk.js","sourcesContent":["import { Canvas as C } from 'react-three-fiber';\nimport styled, { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  body {\n    height: 100vh;\n    width: 100vw;\n    margin: 0;\n    padding: 0;\n    background-color: black;\n    overflow:hidden !important;\n  }\n\n  .content {\n    position: absolute;\n    right: 0;\n    top: 0;\n    padding: 32px;\n    color: white;\n    font-size: 12px;\n  }\n`;\n\nexport const Canvas = styled(C)`\n  display: inline-block;\n  height: 100vh !important;\n  width: 50% !important;\n`;\n\nexport const RayTracedCanvas = styled.div`\n  position: relative;\n  left: 50%;\n  top: 50%;\n  transform: translateX(-50%) translateY(-50%);\n  /* height: 256px;\n  width: 256px; */\n  /* height: 512px;\n  width: 512px; */\n\n  border: 1px solid white;\n  /* background-color: red; */\n`;\n","export default class Color {\n  constructor(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  static black() {\n    return new Color(0.0, 0.0, 0.0);\n  }\n\n  static blue() {\n    return new Color(0.0, 0.3, 0.6);\n  }\n\n  static white() {\n    return new Color(1.0, 1.0, 1.0);\n  }\n\n  static grey() {\n    return new Color(0.5, 0.5, 0.5);\n  }\n\n  static background() {\n    return Color.black();\n  }\n\n  scalarMultiply(factor) {\n    return new Color(this.r * factor, this.g * factor, this.b * factor);\n  }\n\n  scalarDivide(factor) {\n    return new Color(this.r / factor, this.g / factor, this.b / factor);\n  }\n\n  add(color) {\n    return new Color(this.r + color.r, this.g + color.g, this.b + color.b);\n  }\n\n  multiply(color) {\n    return new Color(this.r * color.r, this.g * color.g, this.b * color.b);\n  }\n\n  clamp(lower, upper) {\n    return new Color(\n      Math.max(lower, Math.min(this.r, upper)),\n      Math.max(lower, Math.min(this.g, upper)),\n      Math.max(lower, Math.min(this.b, upper))\n    );\n  }\n\n  toDrawingColor() {\n    const legalize = (d) => (d > 1 ? 1 : d);\n    return new Color(\n      Math.floor(legalize(this.r) * 255),\n      Math.floor(legalize(this.g) * 255),\n      Math.floor(legalize(this.b) * 255)\n    );\n  }\n}\n","export default class Ray {\n  constructor(start, dir) {\n    this.start = start;\n    this.dir = dir;\n  }\n\n  at(factor) {\n    return this.start.add(this.dir.scalarMultiply(factor));\n  }\n}\n","export default class Vector {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  add(vector) {\n    return new Vector(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n  }\n\n  subtract(vector) {\n    return new Vector(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n  }\n\n  dotProduct(vector) {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n  }\n\n  crossProduct(vector) {\n    return new Vector(\n      this.y * vector.z - this.z * vector.y,\n      this.z * vector.x - this.x * vector.z,\n      this.x * vector.y - this.y * vector.x\n    );\n  }\n\n  magnitude() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n\n  scalarMultiply(factor) {\n    return new Vector(this.x * factor, this.y * factor, this.z * factor);\n  }\n\n  scalarDivide(factor) {\n    return new Vector(this.x / factor, this.y / factor, this.z / factor);\n  }\n\n  length() {\n    return Math.sqrt(this.dotProduct(this));\n  }\n\n  distance(vector) {\n    return vector.subtract(this).length();\n  }\n\n  equals(vector) {\n    return this.x === vector.x && this.y === vector.y && this.z === vector.z;\n  }\n\n  normalize() {\n    const magnitude = this.length();\n    return new Vector(\n      this.x / magnitude,\n      this.y / magnitude,\n      this.z / magnitude\n    );\n  }\n}\n","import Vector from './Vector';\n\nexport default class Camera {\n  constructor(position, lookAt, fov, aspectRatio) {\n    this.position = position;\n    this.lookAt = lookAt;\n    this.fov = fov;\n\n    this.angle = Math.tan((Math.PI * 0.5 * fov) / 180);\n\n    this.aspectRatio = aspectRatio;\n\n    this.forward = this.lookAt.subtract(this.position).normalize();\n    this.right = this.forward\n      .crossProduct(new Vector(0.0, -1.0, 0.0))\n      .normalize();\n    this.up = this.forward.crossProduct(this.right).normalize();\n  }\n}\n","import Vector from './Vector';\n\nexport default class Light {\n  constructor(position, color) {\n    this.position = position;\n    this.color = color;\n    this.attenuation = new Vector(0, 0, 1);\n  }\n\n  distance(point) {\n    return this.position.distance(point);\n  }\n\n  intensityAt(point) {\n    const distance = this.distance(point);\n    const intensity = this.color.scalarDivide(\n      this.attenuation.x +\n        this.attenuation.y * distance +\n        this.attenuation.z * distance * distance\n    );\n    return intensity;\n  }\n}\n","export default class Intersection {\n  constructor(isHit, position, normal, ray, material) {\n    this.isHit = isHit;\n    this.position = position;\n    this.normal = normal;\n    this.ray = ray;\n    this.material = material;\n    this.distance = this.isHit\n      ? position.distance(ray.start)\n      : Number.MAX_SAFE_INTEGER;\n  }\n}\n","import Intersection from './Intersection';\n\nexport default class Plane {\n  constructor(name, position, color, material) {\n    this.name = name;\n    this.position = position;\n    this.color = color;\n    this.material = material;\n  }\n\n  intersect(ray) {\n    const denom = this.position.dotProduct(ray.dir);\n\n    if (denom > 0) {\n      return new Intersection(false);\n    }\n\n    const dist = this.position.dotProduct(ray.start) / denom;\n    const position = ray.at(dist);\n\n    return new Intersection(true, position, this.position, ray, this.material);\n  }\n}\n","import Intersection from './Intersection';\n\nexport default class Sphere {\n  constructor(name, position, size, color, material) {\n    this.name = name;\n    this.position = position;\n    this.size = size;\n    this.color = color;\n    this.material = material;\n  }\n\n  intersect(ray) {\n    const rayToCenter = ray.start.subtract(this.position);\n    const b = 2 * ray.dir.dotProduct(rayToCenter);\n    const a = ray.dir.dotProduct(ray.dir);\n    const c = rayToCenter.dotProduct(rayToCenter) - this.size * this.size;\n    const discriminant = b * b - 4 * a * c;\n\n    let closestDistance = 0;\n    let distance1;\n    let distance2;\n\n    if (discriminant < 0) return new Intersection(false);\n\n    if (discriminant === 0) {\n      distance1 = (-0.5 * b) / a;\n    } else {\n      const q =\n        b > 0\n          ? -0.5 * (b + Math.sqrt(discriminant))\n          : -0.5 * (b - Math.sqrt(discriminant));\n      distance1 = q / a;\n      distance2 = c / q;\n    }\n\n    if (distance1 > distance2) {\n      const temp = distance1;\n      distance1 = distance2;\n      distance2 = temp;\n    }\n\n    if (distance1 < 0) {\n      distance1 = distance2;\n      if (distance1 < 0) return new Intersection(false);\n    }\n\n    closestDistance = distance1;\n\n    const position = ray.at(closestDistance);\n    const normal = position.subtract(this.position).scalarDivide(this.size);\n\n    return new Intersection(true, position, normal, ray, this.material);\n  }\n}\n","export default class Material {\n  constructor(\n    diffuse,\n    specular,\n    isSpecular = false,\n    reflection = 0.0,\n    isTransparent = false,\n    refraction = 0.0\n  ) {\n    this.diffuse = diffuse;\n    this.specular = specular;\n    this.isSpecular = isSpecular;\n    this.reflection = reflection;\n    this.isTransparent = isTransparent;\n    this.refraction = refraction;\n  }\n}\n","import Camera from './Camera';\nimport Vector from './Vector';\nimport Light from './Light';\nimport Color from './Color';\nimport Plane from './Plane';\nimport Sphere from './Sphere';\nimport Material from './Material';\n\nexport default class Scene {\n  constructor() {\n    this.camera = new Camera(\n      new Vector(3.0, -5.0, 30.0),\n      new Vector(0.0, 0.0, 0.0),\n      60,\n      2056 / 2056\n    );\n    this.lights = [\n      new Light(new Vector(-5.0, 5.0, 5.0), new Color(75, 75, 75)),\n      new Light(new Vector(10.0, 5.0, -5.0), new Color(25, 25, 25)),\n    ];\n    this.objects = [\n      new Plane(\n        'plane',\n        new Vector(0.0, 1.0, 0.0),\n        new Color(0.9, 0.9, 0.9),\n        new Material((pos) => {\n          if ((Math.floor(pos.z) + Math.floor(pos.x)) % 2 !== 0) {\n            return Color.white();\n          }\n          return Color.black();\n        })\n      ),\n      new Sphere(\n        'sphere',\n        new Vector(0.0, 1.0, -0.25),\n        2.0,\n        new Color(0.4, 1.0, 0.8),\n        new Material(\n          () => new Color(0.4, 1.0, 0.8),\n          undefined,\n          undefined,\n          undefined,\n          true,\n          1.0\n        )\n      ),\n      new Sphere(\n        'sphere',\n        new Vector(-4.0, 0.5, 1.5),\n        1.5,\n        new Color(0.6, 0.2, 0.0),\n        new Material(\n          () => new Color(0.6, 0.2, 0.0),\n          new Color(1.0, 1.0, 1.0),\n          true,\n          0.7\n        )\n      ),\n    ];\n  }\n}\n","import Color from './Color';\nimport Ray from './Ray';\nimport Scene from './Scene';\n\n/**\n * @class RayTracer\n */\n\nexport default class RayTracer {\n  constructor(height, width, context) {\n    this.scene = new Scene();\n    this.height = height;\n    this.width = width;\n    this.context = context;\n    this.inside = true;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  clamp(one, two, three) {\n    return Math.max(one, Math.min(two, three));\n  }\n\n  spawnShadowRay(ray) {\n    const intersection = this.intersectScene(ray);\n    return intersection;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  calculateFresnelValue(direction, normal, n1, n2) {\n    let c1 = this.clamp(-1, 1, normal.dotProduct(direction));\n    let eta1 = n1;\n    let eta2 = n2;\n\n    if (c1 > 0) {\n      const temp = eta1;\n      eta1 = eta2;\n      eta2 = temp;\n    }\n\n    const sine = (eta1 / eta2) * Math.sqrt(Math.max(0.0, 1 - c1 * c1));\n\n    if (sine >= 1) {\n      return 1;\n    }\n\n    const cosine = Math.sqrt(Math.max(0.0, 1 - sine * sine));\n    c1 = Math.abs(c1);\n    const rs = (eta2 * c1 - eta1 * cosine) / (eta2 * c1 + eta1 * cosine);\n    const rp = (eta1 * c1 - eta2 * cosine) / (eta1 * c1 + eta2 * cosine);\n    return (rs * rs + rp * rp) / 2;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getRefractedRay(direction, normal, n1, n2) {\n    let c1 = this.clamp(-1, 1, normal.dotProduct(direction));\n    let eta1 = n1;\n    let eta2 = n2;\n\n    let refractedNormal = normal;\n\n    if (c1 < 0) {\n      c1 = -c1;\n    } else {\n      refractedNormal = refractedNormal.scalarMultiply(-1);\n      const temp = eta1;\n      eta1 = eta2;\n      eta2 = temp;\n    }\n\n    const eta = eta1 / eta2;\n    const c2 = Math.sqrt(1 - eta ** 2 * (1 - c1 ** 2));\n\n    return c2 < 0\n      ? null\n      : direction\n          .scalarMultiply(eta)\n          .add(refractedNormal.scalarMultiply(eta * c1 - c2))\n          .normalize();\n  }\n\n  calculateReflectedLight(direction, normal, position, depth, reflectionCoeff) {\n    const reflectedVector = direction\n      .subtract(normal.scalarMultiply(2 * direction.dotProduct(normal)))\n      .normalize();\n    const reflectedRay = new Ray(position.add(normal), reflectedVector);\n\n    const incomingLight = this.trace(reflectedRay, depth - 1);\n\n    return incomingLight.scalarMultiply(reflectionCoeff);\n  }\n\n  calculateRefractedLight(direction, normal, position, depth) {\n    const fresnel = this.calculateFresnelValue(direction, normal, 1.5, 1.0);\n    const outside = direction.dotProduct(normal) < 0;\n    const bias = normal.scalarMultiply(0.0001);\n    let color = Color.background();\n\n    if (fresnel < 1) {\n      const refractedVector = this.getRefractedRay(direction, normal, 1.5, 1.0);\n      if (refractedVector !== null) {\n        const refractedRayDirection = outside\n          ? position.add(bias)\n          : position.subtract(bias);\n        const refractedRay = new Ray(refractedRayDirection, refractedVector);\n\n        color = color.add(\n          this.trace(refractedRay, depth - 1).scalarMultiply(fresnel)\n        );\n      }\n    }\n\n    const reflectedVector = direction\n      .subtract(normal.scalarMultiply(2 * direction.dotProduct(normal)))\n      .normalize();\n    const reflectedRayDirection = outside\n      ? position.add(bias)\n      : position.subtract(bias);\n    const reflectedRay = new Ray(reflectedRayDirection, reflectedVector);\n\n    color = color.add(\n      this.trace(reflectedRay, depth - 1).scalarMultiply(1 - fresnel)\n    );\n\n    return color;\n  }\n\n  illuminate(direction, material, position, normal, depth) {\n    let color = new Color(0, 0, 0);\n\n    const { lights } = this.scene;\n\n    for (let i = 0; i < lights.length; i += 1) {\n      const directionToLight = lights[i].position\n        .subtract(position)\n        .normalize();\n      const shadowRay = new Ray(\n        position.add(normal.scalarMultiply(0.00001)),\n        directionToLight\n      );\n      const shadowRayIntersection = this.spawnShadowRay(shadowRay);\n      if (\n        shadowRayIntersection === null ||\n        (!shadowRayIntersection.isHit &&\n          shadowRayIntersection.distance > lights[i].distance(position) &&\n          directionToLight.dotProduct(normal) > 0)\n      ) {\n        const intensity = lights[i].intensityAt(position);\n        const genColor = intensity.multiply(\n          material\n            .diffuse(position)\n            .scalarMultiply(normal.dotProduct(directionToLight))\n        );\n        color = color.add(genColor);\n      }\n    }\n\n    if (depth > 1 && material.isSpecular) {\n      color = color.add(\n        this.calculateReflectedLight(\n          direction,\n          normal,\n          position,\n          depth,\n          material.reflection\n        )\n      );\n    }\n\n    if (depth > 1 && material.isTransparent) {\n      color = color.add(\n        this.calculateRefractedLight(direction, normal, position, depth)\n      );\n    }\n\n    return color;\n  }\n\n  intersectScene(ray) {\n    let closest = +Infinity;\n    let closestIntersection = null;\n    for (let i = 0; i < this.scene.objects.length; i += 1) {\n      const object = this.scene.objects[i];\n\n      const intersection = object.intersect(ray);\n\n      if (intersection.isHit && intersection.distance < closest) {\n        closestIntersection = intersection;\n        closest = intersection.distance;\n      }\n    }\n    return closestIntersection;\n  }\n\n  trace(ray, depth) {\n    const intersection = this.intersectScene(ray);\n\n    if (!intersection || !intersection.isHit) {\n      return Color.black();\n    }\n\n    return this.illuminate(\n      intersection.ray.dir,\n      intersection.material,\n      intersection.position,\n      intersection.normal,\n      depth\n    );\n  }\n\n  render() {\n    const { camera } = this.scene;\n\n    const getPoint = (x, y) => {\n      const xx =\n        (2 * ((x + 0.5) * (1 / this.width)) - 1) *\n        camera.angle *\n        camera.aspectRatio;\n      const yy = (1 - 2 * ((y + 0.5) * (1 / this.height))) * camera.angle;\n      return camera.forward\n        .add(camera.right.scalarMultiply(xx).add(camera.up.scalarMultiply(yy)))\n        .normalize();\n    };\n\n    for (let x = 0; x < this.width; x += 1) {\n      for (let y = 0; y < this.height; y += 1) {\n        const ray = new Ray(camera.position, getPoint(x, y));\n\n        const color = this.trace(ray, 5).toDrawingColor();\n\n        this.context.fillStyle = `rgb(${color.r},${color.g}, ${color.b})`;\n        this.context.fillRect(x, y, 1, 1);\n      }\n    }\n  }\n}\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useRef } from 'react';\nimport { useThree } from 'react-three-fiber';\nimport RayTracer from '../Raytracer';\n\nfunction MainScene({ canvasRef }) {\n  const { camera, scene, gl } = useThree();\n  const lightRef = useRef();\n\n  camera.position.set(0, 50, 300);\n  gl.setSize(window.innerWidth / 2, window.innerHeight);\n\n  useEffect(() => {\n    if (lightRef.current) {\n      // const helper = new PointLightHelper(lightRef.current, 10, 0x00ff00);\n      // scene.add(helper);\n    }\n\n    camera.lookAt(0, 0, 0);\n    scene.children.forEach((obj) => camera.worldToLocal(obj.position));\n  }, [camera, scene]);\n\n  useEffect(() => {\n    const { current: ele } = canvasRef;\n    const canvas = document.createElement('canvas');\n    canvas.style.width = '100%';\n    canvas.width = 2056;\n    canvas.height = 2056;\n    ele.appendChild(canvas);\n    const context = canvas.getContext('2d');\n    const rayTracer = new RayTracer(canvas.width, canvas.height, context);\n    rayTracer.render();\n  }, [canvasRef, scene]);\n\n  return (\n    <>\n      <ambientLight attach='light' intensity={0.5} />\n\n      <pointLight\n        ref={lightRef}\n        attach='light'\n        args={[0xffffff, 1, 600]}\n        position={[200, 250, 0]}\n      />\n      <mesh position={[0, 0, 0]} rotation={[-Math.PI / 2, 0, 0]} receiveShadow>\n        <planeBufferGeometry attach='geometry' args={[1000, 1000]} />\n        <meshStandardMaterial attach='material' />\n      </mesh>\n\n      <mesh position={[0, 70, 0]} castShadow receiveShadow>\n        <sphereBufferGeometry attach='geometry' args={[50, 360, 360]} />\n        <meshStandardMaterial attach='material' color={0xaa3300} />\n      </mesh>\n\n      <mesh position={[120, 120, 0]} castShadow receiveShadow>\n        <sphereBufferGeometry attach='geometry' args={[50, 360, 360]} />\n        <meshStandardMaterial attach='material' color={0x77ffcc} />\n      </mesh>\n\n      {/* <mesh position={[-150, 70, 150]} castShadow receiveShadow>\n        <cylinderBufferGeometry attach='geometry' args={[50, 50, 200, 360]} />\n        <meshStandardMaterial attach='material' color={0x2c4251} />\n      </mesh> */}\n    </>\n  );\n}\n\nMainScene.propTypes = {\n  canvasRef: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default MainScene;\n","import React from 'react';\nimport { Canvas, RayTracedCanvas } from './GlobalStyles';\nimport MainScene from './views/MainScene';\n// import Controls from './components/Controls';\n\nfunction App() {\n  const canvasRef = React.useRef();\n\n  return (\n    <div style={{ display: 'inline-flex', height: '100%', width: '100%' }}>\n      <Canvas>\n        <MainScene canvasRef={canvasRef} />\n        {/* <Controls /> */}\n      </Canvas>\n      <div style={{ width: '50%' }}>\n        <RayTracedCanvas ref={canvasRef} />\n      </div>\n      {/* <div className='content'>\n        Green Sphere\n        <br />\n        Position - x: 120, y: 120, z: 0\n        <br />\n        Size - 50\n        <br />\n        <br />\n        Red Sphere\n        <br />\n        Position - x: 0, y: 70, z: 0\n        <br />\n        Size - 50\n        <br />\n        <br />\n        Pointlight\n        <br />\n        Position - x: 200, y: 250, z: 0\n        <br />\n        <br />\n        Camera\n        <br />\n        Position - x: 0, y: 50, z: 300\n        <br />\n        LookAt - x: 0, y: 0, z: 0\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport GlobalStyles from './GlobalStyles';\n\nReactDOM.render(\n  <>\n    <GlobalStyles />\n    <App />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}